# docker-compose.yml
# Este archivo debería estar en la raíz de tu repositorio, un nivel por encima de 'backend' y 'app_streamlit'.

version: '3.8'

services:
  # Servicio para la aplicación Streamlit (Frontend)
  streamlit_app:
    build:
      context: . # El contexto de construcción es la raíz del proyecto
      dockerfile: ./app_streamlit/Dockerfile # Ruta al Dockerfile de Streamlit
    ports:
      - "8501:8501" # Mapea el puerto 8501 del contenedor al puerto 8501 de tu máquina anfitriona
    volumes:
      # Monta el código de tu app en un SUBDIRECTORIO dentro de /app.
      # Esto es CRUCIAL para que las rutas relativas de app.py (../models) funcionen.
      - ./app_streamlit:/app/streamlit_code
      # Monta los modelos y reportes al mismo nivel que el subdirectorio de la app.
      - ./models:/app/models
      - ./reports:/app/reports
    env_file:
      - ./.env # Carga la GROQ_API_KEY y otras variables desde tu archivo .env
    environment:
      # FLASK_URL debe apuntar al nombre del servicio Flask dentro de la red de Docker Compose
      FLASK_URL: http://flask_backend:5000 
    depends_on:
      - flask_backend # Streamlit depende de que Flask esté corriendo
    networks:
      - app_network # Ambas aplicaciones en la misma red

  # Servicio para el backend Flask
  flask_backend:
    build:
      context: . # El contexto de construcción es la raíz del proyecto
      dockerfile: ./backend/Dockerfile # Ruta al Dockerfile de Flask
    ports:
      - "5000:5000" # Mapea el puerto 5000 del contenedor al puerto 5000 de tu máquina anfitriona
    volumes:
      # Monta el código de tu backend para desarrollo en vivo.
      - ./backend:/app
      # Monta la carpeta de credenciales para que Flask pueda acceder a ella.
      # Esto es VITAL para que CREDENTIALS_PATH en app.py funcione.
      - ./backend/credentials:/app/credentials 
    # Si tu backend usara alguna variable de entorno (ej. para Render), la cargarías aquí
    # env_file:
    #   - ./.env 
    networks:
      - app_network # Ambas aplicaciones en la misma red

# Define la red para que los servicios puedan comunicarse entre sí
networks:
  app_network:
    driver: bridge